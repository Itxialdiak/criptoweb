--
-- PostgreSQL database dump
--

-- Dumped from database version 16.3
-- Dumped by pg_dump version 16.3

-- Started on 2025-01-21 21:38:05

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 215 (class 1259 OID 107098)
-- Name: actividades_actividad; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.actividades_actividad (
    id bigint NOT NULL,
    titulo character varying(100) NOT NULL,
    descripcion text NOT NULL,
    nivel_requerido_id bigint NOT NULL,
    solucion text NOT NULL,
    "Pregunta" text NOT NULL,
    pista text NOT NULL,
    puntos integer NOT NULL,
    clave character varying(100),
    terminal boolean NOT NULL,
    "order" integer NOT NULL,
    CONSTRAINT actividades_actividad_order_check CHECK (("order" >= 0)),
    CONSTRAINT actividades_actividad_puntos_check CHECK ((puntos >= 0))
);


ALTER TABLE public.actividades_actividad OWNER TO postgres;

--
-- TOC entry 216 (class 1259 OID 107104)
-- Name: actividades_actividad_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.actividades_actividad ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.actividades_actividad_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 217 (class 1259 OID 107105)
-- Name: actividades_nivel; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.actividades_nivel (
    id bigint NOT NULL,
    nombre character varying(20) NOT NULL
);


ALTER TABLE public.actividades_nivel OWNER TO postgres;

--
-- TOC entry 218 (class 1259 OID 107108)
-- Name: actividades_nivel_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.actividades_nivel ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.actividades_nivel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 219 (class 1259 OID 107109)
-- Name: actividades_pregunta; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.actividades_pregunta (
    id bigint NOT NULL,
    texto character varying(255) NOT NULL,
    opcion1 character varying(100) NOT NULL,
    opcion2 character varying(100) NOT NULL,
    opcion3 character varying(100) NOT NULL,
    respuesta_correcta character varying(100) NOT NULL,
    nivel_id bigint NOT NULL
);


ALTER TABLE public.actividades_pregunta OWNER TO postgres;

--
-- TOC entry 220 (class 1259 OID 107114)
-- Name: actividades_pregunta_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.actividades_pregunta ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.actividades_pregunta_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 221 (class 1259 OID 107115)
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- TOC entry 222 (class 1259 OID 107118)
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 223 (class 1259 OID 107119)
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- TOC entry 224 (class 1259 OID 107122)
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 225 (class 1259 OID 107123)
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- TOC entry 226 (class 1259 OID 107126)
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 227 (class 1259 OID 107127)
-- Name: auth_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO postgres;

--
-- TOC entry 228 (class 1259 OID 107132)
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO postgres;

--
-- TOC entry 229 (class 1259 OID 107135)
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 230 (class 1259 OID 107136)
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 231 (class 1259 OID 107137)
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO postgres;

--
-- TOC entry 232 (class 1259 OID 107140)
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 233 (class 1259 OID 107141)
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- TOC entry 234 (class 1259 OID 107147)
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 235 (class 1259 OID 107148)
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- TOC entry 236 (class 1259 OID 107151)
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 237 (class 1259 OID 107152)
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- TOC entry 238 (class 1259 OID 107157)
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 239 (class 1259 OID 107158)
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- TOC entry 240 (class 1259 OID 107163)
-- Name: informacion_historiaep; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.informacion_historiaep (
    id bigint NOT NULL,
    titulo character varying(100) NOT NULL,
    contenido text NOT NULL,
    orden integer NOT NULL,
    imagen character varying(100),
    priodo_id bigint NOT NULL,
    CONSTRAINT informacion_historiaep_orden_check CHECK ((orden >= 0))
);


ALTER TABLE public.informacion_historiaep OWNER TO postgres;

--
-- TOC entry 241 (class 1259 OID 107169)
-- Name: informacion_historiaep_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.informacion_historiaep ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.informacion_historiaep_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 251 (class 1259 OID 107346)
-- Name: informacion_periodohistoria; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.informacion_periodohistoria (
    id bigint NOT NULL,
    nombre character varying(100) NOT NULL,
    orden integer NOT NULL,
    CONSTRAINT informacion_periodohistoria_orden_check CHECK ((orden >= 0))
);


ALTER TABLE public.informacion_periodohistoria OWNER TO postgres;

--
-- TOC entry 250 (class 1259 OID 107345)
-- Name: informacion_periodohistoria_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.informacion_periodohistoria ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.informacion_periodohistoria_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 242 (class 1259 OID 107170)
-- Name: informacion_tecnicacriptografica; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.informacion_tecnicacriptografica (
    id bigint NOT NULL,
    nombre character varying(100) NOT NULL,
    descripcion text NOT NULL,
    detalles text NOT NULL,
    imagen character varying(100),
    type character varying(100) NOT NULL
);


ALTER TABLE public.informacion_tecnicacriptografica OWNER TO postgres;

--
-- TOC entry 243 (class 1259 OID 107175)
-- Name: informacion_tecnicacriptografica_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.informacion_tecnicacriptografica ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.informacion_tecnicacriptografica_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 249 (class 1259 OID 107326)
-- Name: usuarios_nota; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.usuarios_nota (
    id bigint NOT NULL,
    contenido text NOT NULL,
    fecha_creacion timestamp with time zone NOT NULL,
    actividad_id bigint NOT NULL,
    perfil_id bigint NOT NULL
);


ALTER TABLE public.usuarios_nota OWNER TO postgres;

--
-- TOC entry 248 (class 1259 OID 107325)
-- Name: usuarios_nota_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.usuarios_nota ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.usuarios_nota_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 244 (class 1259 OID 107176)
-- Name: usuarios_perfil; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.usuarios_perfil (
    id bigint NOT NULL,
    nivel character varying(10) NOT NULL,
    user_id integer NOT NULL,
    experiencia integer NOT NULL,
    CONSTRAINT usuarios_perfil_experiencia_check CHECK ((experiencia >= 0))
);


ALTER TABLE public.usuarios_perfil OWNER TO postgres;

--
-- TOC entry 245 (class 1259 OID 107180)
-- Name: usuarios_perfil_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.usuarios_perfil ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.usuarios_perfil_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 246 (class 1259 OID 107181)
-- Name: usuarios_usuarioactividad; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.usuarios_usuarioactividad (
    id bigint NOT NULL,
    estado boolean NOT NULL,
    actividad_id bigint NOT NULL,
    perfil_id bigint NOT NULL,
    prueba boolean NOT NULL
);


ALTER TABLE public.usuarios_usuarioactividad OWNER TO postgres;

--
-- TOC entry 247 (class 1259 OID 107184)
-- Name: usuarios_usuarioactividad_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.usuarios_usuarioactividad ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.usuarios_usuarioactividad_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 5019 (class 0 OID 107098)
-- Dependencies: 215
-- Data for Name: actividades_actividad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.actividades_actividad (id, titulo, descripcion, nivel_requerido_id, solucion, "Pregunta", pista, puntos, clave, terminal, "order") FROM stdin;
2	Palabra invertida	A veces, la forma más sencilla de cifrar un mensaje es escribirlo al revés.	1	LABRADO	ODARBAL	Observa que cada letra parece estar en orden inverso.\r\nNo se ha usado ningún desplazamiento ni sustitución, sólo reversa.	10	0	f	1
1	Cifrado César	El Cifrado César es uno de los métodos más antiguos de cifrado, usado por Julio César. Consiste en desplazar cada letra del mensaje un número fijo de posiciones en el alfabeto.	1	HOLA MUNDO	KRÑD OXPGR	Recuerda que el método más común del cifrado César es el desplazamiento de 3 letras.\r\nRecuerda que el alfabeto va de la A a la Z.\r\nSi la clave es 5 la G se convierte en B al descifrar.\r\nNo olvides la letra Ñ en castellano	10	3	f	2
4	Cifrado por Transposición	El cifrado por transposición reordena las letras de un mensaje siguiendo una serie de pasos o reglas, sin sustituir los caracteres. Por ejemplo, usando una cuadrícula de 3xN y leyendo las columnas en orden distinto al natural.	1	SEGURIDAD INFORMÁTICA	ÁTI\r\nURI\r\nINF\r\nSEG\r\nCA\r\nORM\r\nDAD	La clave de descifrado es 4273615 en 3xN\r\nRecuerda añadir espacios entre palabras si es necesario	10	1	f	3
8	El manuscrito “Arcanum”	Un misterioso manuscrito llamado “Arcanum” muestra textos escritos con símbolos extraños. Se cree que el autor empleó un cifrado por sustitución no estándar, donde cada símbolo corresponde a una letra del abecedario, pero no hay un orden obvio (ni A→simbolo1, B→simbolo2, etc.). Se tiene un pequeño fragmento que se ha logrado descifrar: la palabra “ARCANUM” en el margen, y su correspondiente conjunto de símbolos:\r\n\r\nA → (●°)\r\nR → (☆)\r\nC → (■)\r\nA → (●°) (se repite, confirmando la correspondencia)\r\nN → (▲)\r\nU → (◌)\r\nM → (✦)\r\n\r\n¡Esa es la primera pista para descifrar todo el manuscrito!\r\n\r\nManuscrito:\r\n\r\n●° ☆ ■ ●° ▲ ◌ ✦\r\n\r\n✷○■☆○◎●°  ◎○▲○☆○  ●○□○✷\r\n\r\n○ϟ  ✦◇✷◎○☆◇●●  ●●■◌ϟ◎●°  ◌▲●°  ✚☆●°▲  ╳○☆●●°●	4	SECRETA TENERE DEBES	✷○■☆○◎●°  ◎○▲○☆○  ●○□○✷	Deberás generar una tabla de equivalencia para descifrar este mensaje\r\nEl titulo te ayudará a comenzar las equivalencias, y el texto más largo en castellano te ayudará a deducir otras letras para poder descubrir el subtitulo en latin que debemos traducir para solucionar el misterio.	1000	0	f	1
3	Cifrado Atbash	El cifrado Atbash consiste en sustituir cada letra del alfabeto por su “opuesta”: A se convierte en Z, B en Y, C en X, y así sucesivamente.	1	Clave robusta	Xozev ilyfhgz	El alfabeto latino tiene 27 letras.\r\nA ↔ Z, B ↔ Y, C ↔ X, etc.\r\nSi utilizamos numero podemos restar el valor de la letra a 28 si consideramos la letra A =1. Si consideramos la letra A = 0, la letra Z corresponde a 26 y no a 27, pero podremos restar directamente desde 26	10	0	f	4
5	Cifrado Vigenère	El cifrado Vigenère es un sistema de cifrado por sustitución polialfabética usando una palabra clave.	3	Hackers bloqueados	zeebikg tpqhyxovsu	Cada letra del texto se cifra sumando el valor alfabético de la letra de la clave (cíclicamente).\r\nPara descifrar, restamos el valor alfabético de la clave a cada letra cifrada.	100	secreto	f	1
6	Hash MD5	Proporcionado el siguiente hash MD5 de un mensaje (pequeño). Averigüa cuál era el texto original.	3	hello	5d41402abc4b2a76b9719d911017c592	El texto original es una palabra en minúsculas de 5 letras.	100	0	t	2
7	El pergamino robado	Un antiguo pergamino de la biblioteca municipal ha sido sustraído. En su lugar, han dejado un mensaje cifrado. El texto, escrito con tinta invisible, termina descubriéndose bajo luz ultravioleta. \r\n\r\nDice:\r\nPXEX VRHP\r\n\r\nDebajo, hay un dibujo de un águila y, junto a él, la cifra “3”.	3	¿DÓNDE ESTÁN LOS MIOS?	PXEX VRHP	Revisa si la palabra descifrada tienen sentido en algún idioma, por ejemplo el latin.\r\nTal vez el se han aplicado más de un tipo de cifrado en este mensaje.\r\nPrueba a traducir el mensaje de su lengua original al español (AVISO: Google Trasnlate no os valdrá, probad: https://es.eprevodilac.com/prevodilac-latinski-spanski)	100	0	f	3
\.


--
-- TOC entry 5021 (class 0 OID 107105)
-- Dependencies: 217
-- Data for Name: actividades_nivel; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.actividades_nivel (id, nombre) FROM stdin;
1	Básico
3	Medio
4	Avanzado
\.


--
-- TOC entry 5023 (class 0 OID 107109)
-- Dependencies: 219
-- Data for Name: actividades_pregunta; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.actividades_pregunta (id, texto, opcion1, opcion2, opcion3, respuesta_correcta, nivel_id) FROM stdin;
\.


--
-- TOC entry 5025 (class 0 OID 107115)
-- Dependencies: 221
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- TOC entry 5027 (class 0 OID 107119)
-- Dependencies: 223
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- TOC entry 5029 (class 0 OID 107123)
-- Dependencies: 225
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add perfil	7	add_perfil
26	Can change perfil	7	change_perfil
27	Can delete perfil	7	delete_perfil
28	Can view perfil	7	view_perfil
29	Can add nivel	8	add_nivel
30	Can change nivel	8	change_nivel
31	Can delete nivel	8	delete_nivel
32	Can view nivel	8	view_nivel
33	Can add actividad	9	add_actividad
34	Can change actividad	9	change_actividad
35	Can delete actividad	9	delete_actividad
36	Can view actividad	9	view_actividad
37	Can add pregunta	10	add_pregunta
38	Can change pregunta	10	change_pregunta
39	Can delete pregunta	10	delete_pregunta
40	Can view pregunta	10	view_pregunta
41	Can add historia ep	11	add_historiaep
42	Can change historia ep	11	change_historiaep
43	Can delete historia ep	11	delete_historiaep
44	Can view historia ep	11	view_historiaep
45	Can add tecnica criptografica	12	add_tecnicacriptografica
46	Can change tecnica criptografica	12	change_tecnicacriptografica
47	Can delete tecnica criptografica	12	delete_tecnicacriptografica
48	Can view tecnica criptografica	12	view_tecnicacriptografica
49	Can add usuario actividad	13	add_usuarioactividad
50	Can change usuario actividad	13	change_usuarioactividad
51	Can delete usuario actividad	13	delete_usuarioactividad
52	Can view usuario actividad	13	view_usuarioactividad
53	Can add nota	14	add_nota
54	Can change nota	14	change_nota
55	Can delete nota	14	delete_nota
56	Can view nota	14	view_nota
57	Can add periodo historia	15	add_periodohistoria
58	Can change periodo historia	15	change_periodohistoria
59	Can delete periodo historia	15	delete_periodohistoria
60	Can view periodo historia	15	view_periodohistoria
\.


--
-- TOC entry 5031 (class 0 OID 107127)
-- Dependencies: 227
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
2	pbkdf2_sha256$870000$9X3FHnyVL7iH7WdgVL6mwX$VhfHLB6dpjAmNorjOKA75gHNsCEZM81h+BxrMeYa+Jw=	2025-01-14 12:52:35.591546+01	f	usertest	User	Test	test@test.com	f	t	2025-01-14 12:48:31.69067+01
1	pbkdf2_sha256$870000$asxLJ2kQT1Jeb8UIRYrWcx$0bk0X0iYOcrUtDJcXSXhJ9500mw8owHCpnzFO59jsOA=	2025-01-21 19:43:45.609282+01	t	itxialdiak	Koldo	Gallostra de Prada	koldogdp@gmail.com	t	t	2025-01-05 13:00:17+01
\.


--
-- TOC entry 5032 (class 0 OID 107132)
-- Dependencies: 228
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- TOC entry 5035 (class 0 OID 107137)
-- Dependencies: 231
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- TOC entry 5037 (class 0 OID 107141)
-- Dependencies: 233
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
1	2025-01-07 12:56:43.607287+01	1	Básico	1	[{"added": {}}]	8	1
2	2025-01-07 12:56:53.96633+01	2	Fácil	1	[{"added": {}}]	8	1
3	2025-01-07 12:57:03.076092+01	3	Medio	1	[{"added": {}}]	8	1
4	2025-01-07 12:57:14.745329+01	4	Avanzado	1	[{"added": {}}]	8	1
5	2025-01-07 12:57:23.199449+01	5	Experto	1	[{"added": {}}]	8	1
6	2025-01-07 13:45:39.286896+01	1	Cifrado César	1	[{"added": {}}]	9	1
7	2025-01-07 13:45:58.520073+01	1	Cifrado César	2	[]	9	1
8	2025-01-07 13:51:42.170016+01	1	itxialdiak - Básico	2	[]	7	1
9	2025-01-07 17:04:23.188819+01	1	Cifrado César	2	[{"changed": {"fields": ["Puntos"]}}]	9	1
10	2025-01-07 18:31:50.804774+01	1	Cifrado César	2	[{"changed": {"fields": ["Pregunta", "Pista", "Solucion"]}}]	9	1
11	2025-01-07 18:33:56.352272+01	2	Palabra invertida	1	[{"added": {}}]	9	1
12	2025-01-07 18:43:36.358925+01	3	Cifrado Atbash	1	[{"added": {}}]	9	1
13	2025-01-07 18:57:55.69194+01	4	Cifrado por Transposición	1	[{"added": {}}]	9	1
14	2025-01-07 19:05:29.248792+01	1	Cifrado César	2	[{"changed": {"fields": ["Pista", "Clave"]}}]	9	1
15	2025-01-08 14:19:23.210875+01	1	Cifrado César	2	[]	9	1
16	2025-01-08 19:30:31.243856+01	1	itxialdiak	2	[{"changed": {"fields": ["First name", "Last name"]}}]	4	1
17	2025-01-08 19:30:46.650424+01	2	Palabra invertida	2	[{"changed": {"fields": ["Clave"]}}]	9	1
18	2025-01-08 19:31:30.812409+01	2	Palabra invertida	2	[{"changed": {"fields": ["Clave"]}}]	9	1
19	2025-01-08 19:32:06.321946+01	2	Palabra invertida	2	[{"changed": {"fields": ["Clave"]}}]	9	1
20	2025-01-09 11:05:48.666999+01	5	Cifrado Vigenère	1	[{"added": {}}]	9	1
21	2025-01-09 11:18:56.850957+01	4	Cifrado por Transposición	2	[{"changed": {"fields": ["Nivel requerido", "Puntos"]}}]	9	1
22	2025-01-09 11:19:08.733502+01	5	Cifrado Vigenère	2	[{"changed": {"fields": ["Puntos"]}}]	9	1
23	2025-01-09 11:19:16.503025+01	3	Cifrado Atbash	2	[{"changed": {"fields": ["Nivel requerido", "Puntos"]}}]	9	1
24	2025-01-09 11:22:59.787008+01	1	itxialdiak - Medio	2	[{"changed": {"fields": ["Nivel"]}}]	7	1
25	2025-01-09 12:08:12.232639+01	1	Orígenes Antiguos	1	[{"added": {}}]	15	1
26	2025-01-09 12:08:40.078931+01	2	Edad Media y Renecimiento	1	[{"added": {}}]	15	1
27	2025-01-09 12:09:19.662229+01	3	Siglos XVIII y XIX	1	[{"added": {}}]	15	1
28	2025-01-09 12:09:46.846032+01	4	Primera mitad del siglo XX	1	[{"added": {}}]	15	1
29	2025-01-09 12:10:44.773064+01	5	Segunda mitad del siglo XX: La era digital	1	[{"added": {}}]	15	1
30	2025-01-09 12:10:50.122563+01	4	Primera mitad del siglo XX	2	[]	15	1
31	2025-01-09 12:11:13.123501+01	6	Siglo XXI y Retos actuales	1	[{"added": {}}]	15	1
32	2025-01-09 12:16:45.594042+01	1	Primeros indicios	1	[{"added": {}}]	11	1
33	2025-01-09 12:19:41.451824+01	2	Grécia y Esparta	1	[{"added": {}}]	11	1
34	2025-01-09 12:23:17.46629+01	3	Roma y el Cifrado César	1	[{"added": {}}]	11	1
35	2025-01-09 12:27:03.65773+01	4	Desarrollo de las técnicas de sustitución	1	[{"added": {}}]	11	1
36	2025-01-09 12:32:35.457636+01	5	Aparición de sistemas polialfabéticos	1	[{"added": {}}]	11	1
37	2025-01-09 12:37:18.947206+01	6	Formalización de la criptografía	1	[{"added": {}}]	11	1
38	2025-01-09 12:39:48.036494+01	7	Maquinas cifradoras mecánicas	1	[{"added": {}}]	11	1
39	2025-01-09 12:40:30.702965+01	8	Criptoanálisis en conflictos bélicos	1	[{"added": {}}]	11	1
40	2025-01-09 12:40:34.156163+01	7	Maquinas cifradoras mecánicas	2	[]	11	1
41	2025-01-09 12:40:38.593561+01	8	Criptoanálisis en conflictos bélicos	2	[]	11	1
42	2025-01-09 12:41:15.690669+01	9	Máquinas electromecánicas y la era industrial	1	[{"added": {}}]	11	1
43	2025-01-09 12:44:33.227962+01	10	El papel de Alan Turing y Bletchley Park	1	[{"added": {}}]	11	1
44	2025-01-09 12:46:17.816782+01	9	Máquinas electromecánicas y la era industrial	2	[{"changed": {"fields": ["Imagen"]}}]	11	1
45	2025-01-09 12:46:49.239858+01	8	Criptoanálisis en conflictos bélicos	2	[{"changed": {"fields": ["Imagen"]}}]	11	1
46	2025-01-09 12:47:32.791463+01	7	Maquinas cifradoras mecánicas	2	[{"changed": {"fields": ["Imagen"]}}]	11	1
47	2025-01-09 12:47:39.291549+01	6	Formalización de la criptografía	2	[]	11	1
48	2025-01-09 12:49:14.350882+01	11	Avances en la teoría de la información	1	[{"added": {}}]	11	1
49	2025-01-09 12:54:42.81965+01	12	Criptografía de clave simétrica	1	[{"added": {}}]	11	1
50	2025-01-09 12:56:03.251573+01	13	Criptografía de clave pública	1	[{"added": {}}]	11	1
51	2025-01-09 12:58:39.780506+01	14	Estandares internacionales	1	[{"added": {}}]	11	1
52	2025-01-09 13:00:18.42758+01	15	Criptografía de Curvas Elípticas (ECC)	1	[{"added": {}}]	11	1
53	2025-01-09 13:02:10.950249+01	16	Criptomonedas y Blockchain	1	[{"added": {}}]	11	1
54	2025-01-09 13:04:01.583986+01	17	Privacidad y comunicaciones seguras	1	[{"added": {}}]	11	1
55	2025-01-09 13:05:05.843812+01	18	Amenaza cuántica y criptografía poscuántica	1	[{"added": {}}]	11	1
56	2025-01-13 11:58:01.488421+01	1	Cifrado Vigenère	1	[{"added": {}}]	12	1
57	2025-01-13 12:42:36.968449+01	2	Cifrado César	1	[{"added": {}}]	12	1
58	2025-01-13 12:44:38.599534+01	1	Cifrado Vigenère	2	[{"changed": {"fields": ["Type", "Detalles"]}}]	12	1
59	2025-01-13 12:59:31.793323+01	1	Cifrado César	2	[{"changed": {"fields": ["Pregunta", "Pista"]}}]	9	1
60	2025-01-13 13:13:21.490042+01	3	Cifrado Atbash	2	[{"changed": {"fields": ["Pista", "Clave"]}}]	9	1
61	2025-01-13 13:13:31.043964+01	2	Palabra invertida	2	[{"changed": {"fields": ["Clave"]}}]	9	1
62	2025-01-13 13:29:36.602541+01	6	Hash MD5	1	[{"added": {}}]	9	1
63	2025-01-14 08:40:24.308803+01	7	El pergamino robado	1	[{"added": {}}]	9	1
64	2025-01-14 09:04:19.691054+01	8	El manuscrito “Arcanum”	1	[{"added": {}}]	9	1
65	2025-01-21 19:50:24.091804+01	2	Palabra invertida	2	[]	9	1
66	2025-01-21 19:50:37.718134+01	1	Cifrado César	2	[{"changed": {"fields": ["Order"]}}]	9	1
67	2025-01-21 19:51:29.532867+01	4	Cifrado por Transposición	2	[{"changed": {"fields": ["Order"]}}]	9	1
68	2025-01-21 19:51:46.84038+01	3	Cifrado Atbash	2	[{"changed": {"fields": ["Order"]}}]	9	1
69	2025-01-21 19:52:00.180636+01	5	Cifrado Vigenère	2	[]	9	1
70	2025-01-21 19:52:05.967791+01	6	Hash MD5	2	[{"changed": {"fields": ["Order"]}}]	9	1
71	2025-01-21 19:52:14.402278+01	7	El pergamino robado	2	[{"changed": {"fields": ["Order"]}}]	9	1
\.


--
-- TOC entry 5039 (class 0 OID 107148)
-- Dependencies: 235
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	usuarios	perfil
8	actividades	nivel
9	actividades	actividad
10	actividades	pregunta
11	informacion	historiaep
12	informacion	tecnicacriptografica
13	usuarios	usuarioactividad
14	usuarios	nota
15	informacion	periodohistoria
\.


--
-- TOC entry 5041 (class 0 OID 107152)
-- Dependencies: 237
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	actividades	0001_initial	2025-01-04 19:47:44.558075+01
2	contenttypes	0001_initial	2025-01-04 19:47:44.581922+01
3	auth	0001_initial	2025-01-04 19:47:44.753835+01
4	admin	0001_initial	2025-01-04 19:47:44.81215+01
5	admin	0002_logentry_remove_auto_add	2025-01-04 19:47:44.848181+01
6	admin	0003_logentry_add_action_flag_choices	2025-01-04 19:47:44.882709+01
7	contenttypes	0002_remove_content_type_name	2025-01-04 19:47:44.997844+01
8	auth	0002_alter_permission_name_max_length	2025-01-04 19:47:45.025698+01
9	auth	0003_alter_user_email_max_length	2025-01-04 19:47:45.058268+01
10	auth	0004_alter_user_username_opts	2025-01-04 19:47:45.082201+01
11	auth	0005_alter_user_last_login_null	2025-01-04 19:47:45.121372+01
12	auth	0006_require_contenttypes_0002	2025-01-04 19:47:45.125459+01
13	auth	0007_alter_validators_add_error_messages	2025-01-04 19:47:45.154069+01
14	auth	0008_alter_user_username_max_length	2025-01-04 19:47:45.194658+01
15	auth	0009_alter_user_last_name_max_length	2025-01-04 19:47:45.23043+01
16	auth	0010_alter_group_name_max_length	2025-01-04 19:47:45.260524+01
17	auth	0011_update_proxy_permissions	2025-01-04 19:47:45.29078+01
18	auth	0012_alter_user_first_name_max_length	2025-01-04 19:47:45.321383+01
19	sessions	0001_initial	2025-01-04 19:47:45.34798+01
20	usuarios	0001_initial	2025-01-04 19:47:45.392807+01
21	actividades	0002_pregunta	2025-01-05 10:55:50.610561+01
22	informacion	0001_initial	2025-01-05 10:55:50.647189+01
23	actividades	0003_actividad_solucion	2025-01-07 13:28:58.335466+01
24	actividades	0004_actividad_pregunta_actividad_pista	2025-01-07 13:38:33.279546+01
25	actividades	0005_remove_actividad_contenido	2025-01-07 13:44:49.694797+01
26	usuarios	0002_perfil_experiencia	2025-01-07 13:50:50.427567+01
27	actividades	0006_actividad_puntos	2025-01-07 17:03:43.059476+01
28	actividades	0007_actividad_estado	2025-01-07 17:43:07.769+01
29	actividades	0008_alter_actividad_pregunta	2025-01-07 18:49:54.264968+01
30	actividades	0009_actividad_clave	2025-01-07 19:02:57.471457+01
31	actividades	0010_alter_actividad_clave	2025-01-07 19:08:18.566046+01
32	actividades	0011_remove_actividad_estado	2025-01-08 10:37:47.600256+01
33	usuarios	0003_usuarioactividad_perfil_actividades_resueltas	2025-01-08 10:37:47.808689+01
34	usuarios	0004_usuarioactividad_prueba	2025-01-08 13:40:23.372846+01
35	usuarios	0005_nota	2025-01-08 19:23:23.170402+01
36	actividades	0012_alter_nivel_nombre	2025-01-09 11:21:14.460385+01
37	usuarios	0006_alter_perfil_nivel	2025-01-09 11:21:14.469526+01
38	informacion	0002_periodohistoria_historiaep_imagen_historiaep_priodo	2025-01-09 12:07:21.092778+01
39	informacion	0003_tecnicacriptografica_imagen_and_more	2025-01-13 11:18:30.232502+01
40	actividades	0013_actividad_terminal	2025-01-13 13:18:48.709021+01
41	actividades	0014_actividad_order	2025-01-21 19:37:33.853754+01
\.


--
-- TOC entry 5043 (class 0 OID 107158)
-- Dependencies: 239
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
6zpvisn9mz12lw7h2hq8ycwc4obxhkss	.eJxVjEEOwiAQRe_C2hCG0gIu3XsGMswMUjVtUtqV8e7apAvd_vfef6mE21rT1mRJI6uzAnX63TLSQ6Yd8B2n26xpntZlzHpX9EGbvs4sz8vh_h1UbPVbF7Am-45D3yOJ2ALSGQrgHUHsKFoI1gGbgIXEEUUTIjjv_cDIA4F6fwDbTTee:1tUPJG:l_HycyoTu06mnqexX4mk2euqUw9kAfM_R7kh6zvY6Tg	2025-01-19 13:00:46.34679+01
01gzrd9imgtobdy4djfv39os8zrutsf3	e30:1tXfPM:qd3IEhJ4ytr7_RARtbz8wHzmiMB6X8-Wzdnl5FGD1IA	2025-01-28 12:48:32.664552+01
qzcge88l4o8atfo09k3h8k8osfhs9yis	.eJxVjEEOwiAQRe_C2hCG0gIu3XsGMswMUjVtUtqV8e7apAvd_vfef6mE21rT1mRJI6uzAnX63TLSQ6Yd8B2n26xpntZlzHpX9EGbvs4sz8vh_h1UbPVbF7Am-45D3yOJ2ALSGQrgHUHsKFoI1gGbgIXEEUUTIjjv_cDIA4F6fwDbTTee:1tXiiq:icYrOwGMBVmSf1Ec11aZ05fFeWzn6sUdlnWMpoSVQk8	2025-01-28 16:20:52.367875+01
32m2j9icox7ozzq19ssmmpuocbci1ath	.eJxVjEEOwiAQRe_C2hCG0gIu3XsGMswMUjVtUtqV8e7apAvd_vfef6mE21rT1mRJI6uzAnX63TLSQ6Yd8B2n26xpntZlzHpX9EGbvs4sz8vh_h1UbPVbF7Am-45D3yOJ2ALSGQrgHUHsKFoI1gGbgIXEEUUTIjjv_cDIA4F6fwDbTTee:1taJE1:sjP4l28lzjUCH0MphOurUrNHNVdqhcACU-0hVedvdDw	2025-02-04 19:43:45.342902+01
858o6i2izzygf0dcz09e2q4iuepsmt3d	.eJxVjEEOwiAQRe_C2hCG0gIu3XsGMswMUjVtUtqV8e7apAvd_vfef6mE21rT1mRJI6uzAnX63TLSQ6Yd8B2n26xpntZlzHpX9EGbvs4sz8vh_h1UbPVbF7Am-45D3yOJ2ALSGQrgHUHsKFoI1gGbgIXEEUUTIjjv_cDIA4F6fwDbTTee:1taJE1:sjP4l28lzjUCH0MphOurUrNHNVdqhcACU-0hVedvdDw	2025-02-04 19:43:45.613288+01
\.


--
-- TOC entry 5044 (class 0 OID 107163)
-- Dependencies: 240
-- Data for Name: informacion_historiaep; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.informacion_historiaep (id, titulo, contenido, orden, imagen, priodo_id) FROM stdin;
1	Primeros indicios	Desde los albores de la humanidad, la necesidad de ocultar información ha sido una constante, nacida de la importancia de proteger conocimientos clave. En las antiguas civilizaciones de Mesopotamia y Egipto, por ejemplo, ya se empleaban técnicas rudimentarias de codificación. En tablillas de arcilla y papiros, algunos escribas sustituían símbolos o utilizaban variantes poco comunes con el fin de confundir el significado de los textos. Aunque estas prácticas no se asemejan a los sistemas avanzados de encriptación que conocemos hoy, representan los primeros intentos de salvaguardar información.\r\n\r\nEn la antigüedad, quienes más recurrían a estos métodos eran mercaderes, sacerdotes y gobernantes. Los mercaderes ocultaban fórmulas de comercio o rutas valiosas, los sacerdotes protegían rituales y conocimientos religiosos, y los gobernantes cifraban planes militares y decisiones políticas. Estas prácticas, aunque rudimentarias, evidencian una comprensión temprana de la importancia del secreto en contextos estratégicos y religiosos. Con el tiempo, estas técnicas evolucionaron hasta convertirse en la base de la criptografía, disciplina esencial para la protección de la información en todas las épocas	1	images/historia/cuneiform.webp	1
2	Grécia y Esparta	En la antigua Grecia, Esparta se destacó no solo por su destreza militar, sino también por su ingenio en la comunicación secreta. Uno de los métodos criptográficos más notables de la época fue la escítala espartana, utilizada para enviar mensajes confidenciales durante campañas militares.\r\nLa escítala consistía en un bastón de madera sobre el cual se enrollaba una tira de cuero o pergamino. El remitente escribía el mensaje a lo largo del bastón; al desenrollar la tira, las letras aparecían desordenadas y el contenido resultaba ininteligible. Solo quien poseía un bastón de idénticas dimensiones podía volver a enrollar la tira y leer el mensaje correctamente, garantizando así la confidencialidad de la información transmitida. \r\nEste ingenioso sistema de cifrado por transposición refleja la importancia que los espartanos otorgaban a la seguridad de sus comunicaciones. La escítala no solo protegía los mensajes de ser interceptados por enemigos, sino que también aseguraba que la información solo pudiera ser descifrada por el destinatario previsto, fortaleciendo la eficacia y coordinación en las operaciones militares espartanas.	2	images/historia/1200px-Skytale.png	1
3	Roma y el Cifrado César	Durante la época del Imperio Romano, el cifrado de sustitución simple alcanzó notoriedad gracias a Julio César, quien empleó un método sencillo pero eficaz para proteger sus comunicaciones militares. Este sistema, conocido hoy como "Cifrado César", consistía en rotar cada letra del alfabeto un número fijo de posiciones. Por ejemplo, en un desplazamiento de 3, la letra A se convertía en D, la B en E, y así sucesivamente. Este enfoque hacía que los mensajes fueran ilegibles a simple vista para cualquiera que no conociera la clave de la rotación.\r\n\r\nAunque en la actualidad este método se considera elemental, en su tiempo fue una herramienta efectiva. La mayoría de las personas no estaba familiarizada con conceptos de sustitución o cifrado, y la dificultad de interpretar un mensaje interceptado sin la clave proporcionaba una ventaja estratégica en el campo militar. Este sistema de rotación se convirtió en una de las primeras formas documentadas de criptografía y dejó un legado que perdura en la historia de la seguridad de la información.	3	images/historia/VxzFONnOzbf4L2qwliODVyottwNR27PIunDwyHT4.png	1
4	Desarrollo de las técnicas de sustitución	En la Edad Media, la criptografía evolucionó hacia métodos más estructurados, dando lugar a la sustitución monoalfabética. Este sistema consistía en reemplazar cada letra del mensaje original por otra letra o símbolo, de forma consistente según un "diccionario" o tabla de equivalencias predefinida. Aunque más sofisticado que los sistemas anteriores, este enfoque aún requería que tanto emisores como receptores compartieran la clave de sustitución, lo que añadía un nivel de organización y confianza.\r\n\r\nEn este periodo, las cortes reales y papales jugaron un papel crucial en el perfeccionamiento de los cifrados. Reyes, papas y nobles comenzaron a emplear a secretarios y expertos en criptografía para proteger sus comunicaciones estratégicas. Los mensajes cifrados mantenían en secreto planes militares, negociaciones diplomáticas y, a menudo, tramas de espionaje. Estas prácticas fomentaron el auge del espionaje y la contrainteligencia, dando lugar a una carrera constante entre quienes buscaban ocultar información y quienes intentaban descifrarla. La criptografía, más que una herramienta técnica, se convirtió en un arte reservado a las élites del poder.	1	images/historia/formula-alquimica-simbolos-encriptados.png	2
5	Aparición de sistemas polialfabéticos	Con el desarrollo de la criptografía en los siglos XV y XVI, surgió un avance significativo: los sistemas polialfabéticos. Entre ellos, la célebre cifra de Vigenère marcó un antes y un después. Este método, atribuido al diplomático francés Blaise de Vigenère, utilizaba múltiples alfabetos de sustitución para cifrar un mensaje. La innovación principal radicaba en que la misma letra del texto claro podía encriptarse de formas distintas dependiendo de su posición y de una clave predefinida. Este nivel de variabilidad añadía una complejidad que dificultaba enormemente la interpretación no autorizada.\r\n\r\nEn su tiempo, la cifra de Vigenère fue considerada “indescifrable” y representó un salto cualitativo frente a los sistemas monoalfabéticos, que ya eran vulnerables al criptoanálisis. La introducción de múltiples alfabetos rompió patrones predecibles, complicando los análisis basados en frecuencias de letras. Este avance consolidó la criptografía como una disciplina más sofisticada, destacando su importancia estratégica en un contexto histórico donde la información era un recurso clave en conflictos políticos, militares y religiosos.	2	images/historia/2015_CKS_10456_0084_002vigenere_blaise_de_traicte_des_chiffres_ou_secret_Rv9UoZ1.jpg	2
7	Maquinas cifradoras mecánicas	Con el avance de la tecnología, surgieron las primeras máquinas diseñadas para automatizar parcialmente los procesos de cifrado y descifrado. Aunque rudimentarias en comparación con las complejas invenciones del siglo XX, estas máquinas representaron un cambio significativo al sustituir métodos manuales por sistemas mecánicos más rápidos y confiables. Algunos de estos dispositivos utilizaban engranajes, rodillos o discos que permitían realizar sustituciones o transposiciones de manera más eficiente y menos propensa a errores humanos.\r\n\r\nEl ámbito militar fue el principal escenario para estas innovaciones. Diversos ejércitos comenzaron a experimentar con estas máquinas para agilizar la transmisión de mensajes cifrados en tiempos de guerra, especialmente cuando la velocidad y la seguridad de las comunicaciones eran cruciales. Estas primeras invenciones sentaron las bases para el desarrollo de sistemas más avanzados, como las célebres máquinas Enigma y Lorenz que revolucionarían la criptografía en el siglo XX, marcando el inicio de la transición hacia una criptografía moderna y mecanizada.	2	images/historia/28.png	3
10	El papel de Alan Turing y Bletchley Park	Uno de los episodios más trascendentales en la historia de la criptografía y la tecnología tuvo lugar durante la Segunda Guerra Mundial en Bletchley Park, Reino Unido. Este centro secreto de inteligencia reunió a algunos de los mayores genios matemáticos, lógicos y lingüistas de la época, encabezados por figuras como Alan Turing. Su misión: descifrar los mensajes encriptados por la máquina Enigma utilizada por las fuerzas alemanas.\r\n\r\nLa máquina Enigma, con su capacidad de generar millones de combinaciones diarias, representaba un desafío monumental. Turing y su equipo desarrollaron métodos matemáticos y estadísticos para reducir la complejidad del problema. Aprovechando errores operativos de los operadores alemanes y patrones en los mensajes, diseñaron las "Bombas", máquinas electromecánicas capaces de probar configuraciones de Enigma a una velocidad sin precedentes. Este logro permitió descifrar mensajes en cuestión de horas, en lugar de semanas, proporcionando una ventaja crucial a los Aliados en la planificación de operaciones militares.\r\n\r\nEl trabajo en Bletchley Park no solo influyó en el curso de la guerra, acortándola significativamente según historiadores, sino que también sentó las bases para la computación moderna. Las ideas de Turing sobre algoritmos y máquinas capaces de realizar cálculos complejos inspiraron el diseño de los primeros ordenadores electrónicos. Las “Bombas” pueden considerarse proto-computadoras, que demostraron cómo la tecnología podía abordar problemas antes considerados insuperables.\r\n\r\nAdemás del impacto técnico, el trabajo en Bletchley Park marcó un momento histórico en la colaboración interdisciplinaria y en la aplicación práctica de la matemática avanzada. Lo que comenzó como un esfuerzo por descifrar códigos evolucionó hacia una revolución científica que definiría la era digital.	2	images/historia/Bletchley-replica-bombe.jpg	4
9	Máquinas electromecánicas y la era industrial	La era industrial trajo consigo un salto cualitativo en la criptografía con la aparición de máquinas electromecánicas, marcando un antes y un después en la historia de las comunicaciones seguras. Entre ellas, la máquina Enigma, utilizada por las fuerzas alemanas durante la Segunda Guerra Mundial, destaca como uno de los dispositivos más icónicos. Su diseño basado en rotores intercambiables y circuitos eléctricos permitía generar millones de configuraciones diarias, haciendo que los mensajes fueran extremadamente difíciles de descifrar sin acceso al dispositivo y a la configuración específica utilizada.\r\n\r\nAdemás de la Enigma, otras potencias desarrollaron sus propias máquinas criptográficas. La Typex británica y la Sigaba estadounidense, por ejemplo, ofrecían diferentes niveles de complejidad y seguridad, cada una adaptada a las necesidades de sus respectivos ejércitos. Estas máquinas no solo protegieron comunicaciones militares, sino que también simbolizaron el auge de la criptografía mecanizada, donde el ingenio humano y la tecnología se unieron para redefinir la seguridad de la información en un mundo cada vez más interconectado.	1	images/historia/1_DSCN0753.jpg	4
8	Criptoanálisis en conflictos bélicos	Durante las guerras napoleónicas y otros grandes conflictos de la época, la criptografía no solo desempeñó un papel crucial en la protección de información, sino que también impulsó el desarrollo del criptoanálisis, el arte de descifrar mensajes cifrados sin conocer la clave. Las potencias militares comenzaron a reclutar expertos capaces de analizar y desentrañar los códigos del enemigo, una habilidad que se convirtió en una ventaja estratégica decisiva en el campo de batalla y en la diplomacia.\r\n\r\nEl avance de los métodos de cifrado fue acompañado por el perfeccionamiento de técnicas de ataque, como el análisis de frecuencias, que identificaba patrones en las letras más usadas en un idioma, y la búsqueda de repeticiones que podían revelar claves o esquemas de cifrado. Estas herramientas permitieron descomponer mensajes aparentemente indescifrables y marcaron un salto en la carrera entre la creación de códigos más seguros y las formas de romperlos. Este período sentó las bases de un criptoanálisis sistemático que sería fundamental en los grandes conflictos del siglo XX.	3	images/historia/66785188bc3fd.jpeg	3
6	Formalización de la criptografía	Con la expansión de la alfabetización y el surgimiento de la imprenta, la criptografía comenzó a sistematizarse y difundirse. Los primeros tratados y manuales sobre técnicas de cifrado y descifrado se convirtieron en herramientas fundamentales para la formalización de esta disciplina. Obras como "Polygraphiae" de Johannes Trithemius o "La cifra" de Giovan Battista della Porta recopilaron métodos, principios y aplicaciones prácticas, facilitando el acceso al conocimiento criptográfico y promoviendo su perfeccionamiento en diversos contextos.\r\n\r\nParalelamente, se experimentó con variantes más complejas de cifrado. Entre ellas, se incluyeron métodos que reemplazaban sílabas o incluso palabras enteras en lugar de letras individuales, añadiendo capas adicionales de complejidad. Estas innovaciones ampliaron el repertorio de técnicas disponibles y sentaron las bases para la diversificación de métodos que surgirían posteriormente. La criptografía dejó de ser únicamente un arte secreto reservado para la élite, para convertirse en una disciplina en constante evolución, adaptándose a las necesidades estratégicas de cada época.	1	images/historia/fondotrithemius.jpg	3
11	Avances en la teoría de la información	La década de 1940 marcó un punto de inflexión en la criptografía gracias a los avances teóricos de Claude Shannon, considerado el padre de la teoría de la información. Shannon publicó una serie de trabajos fundamentales que revolucionaron la forma en que se entendían las comunicaciones y la seguridad de los mensajes. Entre ellos, su artículo "A Mathematical Theory of Communication" estableció los principios básicos para cuantificar y analizar la información, proporcionando una base científica que influiría profundamente en la criptografía moderna.\r\n\r\nUno de los conceptos clave introducidos por Shannon fue la entropía, una medida de la incertidumbre o imprevisibilidad de la información contenida en un mensaje. Este concepto permitió evaluar cuán seguro era un sistema de cifrado en función de su capacidad para resistir intentos de descifrado. Shannon también abordó la idea de redundancia, explicando cómo los patrones repetitivos en un mensaje podían ser aprovechados por criptoanalistas para deducir claves o estructuras internas del sistema.\r\n\r\nLa contribución más significativa de Shannon fue proporcionar un marco matemático riguroso que permitió formalizar la seguridad criptográfica. Esto no solo fortaleció los métodos existentes, sino que también estableció criterios para diseñar sistemas más robustos. Por ejemplo, definió el concepto de seguridad perfecta, en el que un cifrado sería completamente impenetrable si la clave utilizada era al menos tan larga como el mensaje y completamente aleatoria, como en el caso del cifrado de un solo uso (one-time pad).\r\n\r\nEl impacto de estas ideas trascendió la criptografía. La teoría de Shannon fue un catalizador para la era digital, sentando las bases de las telecomunicaciones, el almacenamiento de datos y la ciberseguridad tal como las conocemos hoy. Su trabajo unió la criptografía con otras disciplinas, como las matemáticas y la informática, dando inicio a una nueva etapa de innovación tecnológica y conceptual.	3	images/historia/claude-shannon-photo-c-estate-of-francis-belloscience-photo-library.jpg	4
12	Criptografía de clave simétrica	La criptografía de clave simétrica, en la que una única clave secreta es utilizada tanto para cifrar como para descifrar datos, adquirió una nueva dimensión con la llegada de la informática. En 1977, el gobierno de los Estados Unidos adoptó el DES (Data Encryption Standard) como el estándar oficial para proteger información sensible. Este algoritmo se basaba en operaciones repetidas de permutación y sustitución sobre bloques de datos de 64 bits, utilizando una clave secreta de 56 bits. Su diseño, desarrollado por IBM en colaboración con la NSA, buscaba ofrecer un equilibrio entre seguridad y eficiencia, adaptándose a los recursos computacionales de la época.\r\n\r\nDES fue uno de los primeros algoritmos de cifrado ampliamente utilizados en entornos informáticos, consolidándose como un pilar en la seguridad de datos en aplicaciones bancarias, gubernamentales y comerciales. Su popularidad marcó un avance significativo en la criptografía moderna al demostrar cómo los algoritmos podían integrarse en sistemas computacionales para proteger grandes volúmenes de información.\r\n\r\nSin embargo, con el tiempo, la capacidad de cómputo creció exponencialmente, y las vulnerabilidades de DES comenzaron a hacerse evidentes. Su clave de 56 bits, considerada segura en su momento, se volvió insuficiente frente a ataques de fuerza bruta que podían probar todas las combinaciones posibles en tiempos cada vez más reducidos. Este deterioro en su seguridad llevó a la comunidad a buscar alternativas más robustas. En respuesta, se desarrollaron variantes como Triple DES (3DES), que utilizaba múltiples aplicaciones del algoritmo para incrementar la seguridad, aunque a costa de una mayor complejidad y tiempo de procesamiento.\r\n\r\nFinalmente, DES fue reemplazado como estándar por el AES (Advanced Encryption Standard) en 2001, un algoritmo más seguro y eficiente que marcó la siguiente generación en la criptografía de clave simétrica. La evolución de DES, desde su adopción hasta su eventual obsolescencia, refleja el continuo desafío de mantener la seguridad frente a los avances tecnológicos y la creciente capacidad de los atacantes.	1	images/historia/IBM-701-operator.webp	5
13	Criptografía de clave pública	La década de 1970 marcó una auténtica revolución en la criptografía con la aparición de la criptografía de clave pública, también conocida como criptografía asimétrica. Este enfoque transformó por completo la manera de establecer comunicaciones seguras, al eliminar la necesidad de que las partes intercambiaran previamente una clave secreta. El punto de inflexión llegó en 1977 con la creación del algoritmo RSA, desarrollado por Ronald Rivest, Adi Shamir y Leonard Adleman en el MIT. RSA se basaba en la complejidad matemática de factorizar números grandes, proporcionando una solución práctica y robusta al problema de la distribución de claves.\r\n\r\nLa principal innovación de la criptografía de clave pública es el uso de dos claves relacionadas: una clave privada, que se mantiene en secreto y es conocida solo por su propietario, y una clave pública, que puede compartirse libremente. Los datos cifrados con la clave pública solo pueden descifrarse con la clave privada correspondiente, y viceversa. Este mecanismo permitió establecer comunicaciones seguras incluso entre partes que nunca se habían conocido antes, abriendo nuevas posibilidades para la seguridad digital.\r\n\r\nAdemás, este sistema introdujo el concepto de firma digital, que no solo asegura la confidencialidad de los mensajes, sino también la autenticidad del remitente. Utilizando su clave privada, el emisor puede firmar un mensaje, y cualquier receptor con acceso a su clave pública puede verificar que la firma es válida. Esto añadió una capa crucial de confianza a las comunicaciones digitales, facilitando la autenticación en contextos como el comercio electrónico, los certificados digitales y las infraestructuras de clave pública (PKI).\r\n\r\nLa criptografía de clave pública no solo resolvió desafíos técnicos, sino que también allanó el camino para aplicaciones que hoy son fundamentales en la vida digital moderna. Su impacto sigue siendo incalculable, ya que forma la base de protocolos como SSL/TLS, que aseguran las conexiones en Internet, y tecnologías blockchain, entre muchas otras.	2	images/historia/62e05d65188c8c1c5228ccef_cifrado-asimetrico-1024x1024.png	5
14	Estandares internacionales	Con el avance de la informática y el aumento de las amenazas a la seguridad, surgió la necesidad de un estándar de cifrado más seguro que pudiera adaptarse a las demandas de una sociedad cada vez más digitalizada. A finales de la década de 1990, el AES (Advanced Encryption Standard) fue seleccionado como sucesor del obsoleto DES tras un riguroso proceso de evaluación organizado por el Instituto Nacional de Estándares y Tecnología (NIST) de Estados Unidos. AES, basado en el algoritmo Rijndael desarrollado por los criptógrafos belgas Joan Daemen y Vincent Rijmen, fue oficialmente adoptado en 2001 y se convirtió rápidamente en el estándar global para el cifrado de datos.\r\n\r\nAES se destacó por su eficiencia y robustez, gracias a su diseño que permite operar con claves de 128, 192 o 256 bits, ofreciendo distintos niveles de seguridad según las necesidades. A diferencia de DES, AES es resistente a ataques de fuerza bruta debido a su clave más larga y su compleja estructura basada en sustituciones, permutaciones y operaciones matemáticas en bloques de 128 bits. Su diseño también fue optimizado para implementarse eficientemente en hardware y software, lo que lo hizo ideal para una amplia variedad de aplicaciones.\r\n\r\nLa adopción de AES marcó una nueva era en la seguridad de la información. Hoy en día, es utilizado por gobiernos, empresas y particulares en todo tipo de sistemas, desde la protección de datos confidenciales en infraestructuras críticas hasta el cifrado de dispositivos personales como teléfonos móviles y computadoras. AES también se convirtió en el estándar para protocolos de seguridad como SSL/TLS, que aseguran la privacidad y la integridad de las comunicaciones en Internet.\r\n\r\nEl éxito de AES no solo reside en su capacidad técnica, sino también en su estandarización internacional, que permitió su adopción universal y garantizó una base común para proteger la información en un mundo interconectado. Este algoritmo sigue siendo una pieza clave en la criptografía moderna, estableciendo un precedente para futuros estándares de seguridad.	3	images/historia/maxresdefault.jpg	5
15	Criptografía de Curvas Elípticas (ECC)	La criptografía de curvas elípticas (ECC) ha emergido como una de las tecnologías más importantes en la criptografía moderna debido a su combinación de eficiencia y seguridad. ECC se basa en propiedades matemáticas de las curvas elípticas definidas sobre campos finitos. Su principal ventaja es que ofrece un nivel de seguridad equivalente a otros sistemas, como RSA, pero utilizando claves mucho más cortas. Por ejemplo, una clave de 256 bits en ECC proporciona una seguridad comparable a una clave de 3072 bits en RSA, lo que reduce significativamente el consumo de recursos y el tiempo de procesamiento.\r\n\r\nEsta eficiencia hace que ECC sea particularmente adecuada para aplicaciones modernas que requieren un alto rendimiento en sistemas con recursos limitados, como dispositivos móviles, tarjetas inteligentes y sensores IoT. Al reducir el tamaño de las claves y las operaciones necesarias, ECC minimiza el uso de energía y ancho de banda, lo que es crítico en entornos donde estas variables son escasas o costosas.\r\n\r\nEn términos de aplicaciones, ECC se ha convertido en un estándar en muchas áreas. Se utiliza ampliamente en protocolos web seguros, como TLS, para establecer conexiones cifradas en Internet. En el ámbito de las criptomonedas, ECC juega un papel crucial en la generación y verificación de claves públicas y firmas digitales, como las que emplean Bitcoin y Ethereum. Además, su adopción en dispositivos móviles y sistemas de autenticación fortalece la seguridad sin comprometer la experiencia del usuario ni el rendimiento del dispositivo.\r\n\r\nECC no solo representa un avance técnico, sino que también aborda desafíos contemporáneos relacionados con la escalabilidad y sostenibilidad en un mundo cada vez más conectado. A medida que las necesidades de seguridad digital continúan evolucionando, ECC se posiciona como una herramienta fundamental para garantizar la privacidad y la integridad de los datos en múltiples contextos.	1	images/historia/Elliptic-Curve-CryptographyMay-17.jpg	6
16	Criptomonedas y Blockchain	La invención de Bitcoin en 2008, bajo el seudónimo de Satoshi Nakamoto, marcó un hito en la historia de la criptografía al llevarla al centro de un sistema financiero completamente descentralizado. Bitcoin se basa en la tecnología Blockchain, un libro de contabilidad distribuido que registra todas las transacciones en bloques enlazados de forma secuencial y asegurados mediante criptografía. Este sistema utiliza tres pilares clave: firmas digitales, que garantizan la autenticidad de las transacciones; funciones hash criptográficas, que aseguran la integridad de los datos en los bloques; y el mecanismo de prueba de trabajo (Proof of Work), que dificulta la manipulación del sistema al requerir un esfuerzo computacional significativo para añadir nuevos bloques a la cadena.\r\n\r\nBlockchain eliminó la necesidad de una autoridad central al establecer un modelo de consenso distribuido, donde la confianza se genera a través de criptografía y acuerdos entre los participantes de la red. Esto permitió que Bitcoin se convirtiera en la primera moneda digital funcional, abriendo la puerta a un nuevo paradigma financiero.\r\n\r\nLa idea de Bitcoin inspiró la creación de numerosas criptomonedas y plataformas que expandieron el ecosistema blockchain. Ethereum, lanzado en 2015, agregó la capacidad de programar contratos inteligentes, pequeños programas que se ejecutan automáticamente al cumplirse ciertas condiciones, ampliando las aplicaciones más allá de las transacciones financieras. Otras criptomonedas como Litecoin, Ripple y Cardano han introducido innovaciones propias, como tiempos de transacción más rápidos, modelos de consenso alternativos y mayor eficiencia energética.\r\n\r\nEn este nuevo ecosistema, la criptografía se ha convertido en un elemento fundamental para garantizar la seguridad, la privacidad y la confianza. Los avances en criptografía de curvas elípticas (ECC) y funciones hash siguen fortaleciendo las bases técnicas de estas tecnologías, mientras que los desafíos asociados, como el posible impacto de la computación cuántica, impulsan la investigación continua en criptografía post-cuántica.\r\n\r\nHoy en día, las criptomonedas y blockchain no solo son herramientas para transacciones financieras, sino también plataformas para aplicaciones descentralizadas, contratos digitales y nuevos modelos de gobernanza, consolidándose como una de las transformaciones tecnológicas más significativas del siglo XXI.	2	images/historia/candena-bloques-blockchain.jpeg	6
17	Privacidad y comunicaciones seguras	En la era digital, la privacidad y la seguridad en las comunicaciones se han convertido en pilares fundamentales para proteger la información personal y sensible. La criptografía ha jugado un papel crucial en este ámbito, impulsando tecnologías que aseguran la confidencialidad, integridad y autenticidad de los datos. Dos de las herramientas más destacadas en este campo son los protocolos TLS/SSL y la mensajería cifrada de extremo a extremo.\r\n\r\nTLS/SSL (Transport Layer Security / Secure Sockets Layer) es la base de las comunicaciones seguras en Internet. Estos protocolos, ampliamente utilizados en transacciones bancarias, comercio electrónico y navegación web, cifran la información transmitida entre el cliente y el servidor, evitando que terceros puedan interceptarla. Cada vez que accedemos a un sitio web con "https" en la barra de direcciones, estamos utilizando TLS para proteger nuestras contraseñas, datos bancarios y otros datos sensibles. TLS no solo garantiza la confidencialidad, sino también la autenticidad, mediante certificados digitales que validan la identidad de los sitios web. Su adopción masiva ha hecho posible un Internet más seguro y confiable.\r\n\r\nPor otro lado, la mensajería cifrada de extremo a extremo ha transformado la forma en que las personas se comunican, brindándoles un nivel de privacidad sin precedentes. Aplicaciones como WhatsApp, Signal y Telegram implementan este tipo de cifrado para asegurar que solo el emisor y el receptor de los mensajes puedan leer el contenido. Incluso los propios proveedores de estas plataformas no pueden acceder a los mensajes cifrados, lo que incrementa significativamente la protección frente a espionaje y filtraciones de datos. Este enfoque utiliza criptografía asimétrica para intercambiar claves seguras y criptografía simétrica para proteger el contenido de los mensajes, logrando un equilibrio entre seguridad y eficiencia.\r\n\r\nEl auge de estas tecnologías responde a una creciente preocupación por la privacidad en un mundo donde los datos personales son cada vez más valiosos. Sin embargo, también plantea desafíos, como el uso de estas herramientas por parte de actores malintencionados. A pesar de ello, TLS/SSL y la mensajería cifrada de extremo a extremo representan avances esenciales para salvaguardar la libertad y privacidad de los usuarios en la era digital.	3	images/historia/ES-what-are-the-differences-between-http-and-https-768x551.png	6
18	Amenaza cuántica y criptografía poscuántica	El surgimiento de las computadoras cuánticas representa una de las mayores amenazas potenciales para la criptografía moderna. A diferencia de las computadoras tradicionales, que procesan datos de forma secuencial, las computadoras cuánticas pueden realizar millones de operaciones en paralelo gracias a la superposición cuántica y el entrelazamiento. Esto les permitiría resolver problemas matemáticos que actualmente se consideran intratables en tiempos exponencialmente más rápidos. Por ejemplo, el algoritmo de Shor podría factorizar grandes números primos, comprometiendo la seguridad de algoritmos ampliamente utilizados como RSA y ECC, que dependen de la dificultad de estos problemas para garantizar la confidencialidad.\r\n\r\nAnte esta amenaza inminente, ha surgido una nueva área de investigación conocida como criptografía poscuántica, enfocada en el desarrollo de algoritmos resistentes a ataques cuánticos. Estos sistemas se basan en problemas matemáticos que, hasta ahora, no tienen soluciones eficientes, incluso con la potencia de una computadora cuántica. Entre los enfoques más prometedores se encuentran los algoritmos basados en retículas algebraicas, funciones hash y códigos de corrección de errores. Además, estos nuevos métodos buscan garantizar no solo la seguridad frente a amenazas cuánticas, sino también un desempeño eficiente en hardware y software tradicionales.\r\n\r\nOrganizaciones como el Instituto Nacional de Estándares y Tecnología (NIST) están liderando iniciativas globales para estandarizar algoritmos poscuánticos. El objetivo es garantizar una transición fluida hacia sistemas más seguros antes de que las computadoras cuánticas sean prácticas y accesibles. Este esfuerzo es crucial no solo para proteger la información futura, sino también para salvaguardar los datos cifrados actualmente que podrían ser almacenados por adversarios con la esperanza de descifrarlos en el futuro, un fenómeno conocido como "almacena ahora, descifra después".\r\n\r\nLa amenaza cuántica subraya la necesidad de una evolución constante en la criptografía. Aunque las computadoras cuánticas funcionales a gran escala aún están en desarrollo, la preparación temprana mediante la criptografía poscuántica es esencial para garantizar la seguridad en la era cuántica y más allá.	4	images/historia/ordenador-cuantico-apertura.jpeg	6
\.


--
-- TOC entry 5055 (class 0 OID 107346)
-- Dependencies: 251
-- Data for Name: informacion_periodohistoria; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.informacion_periodohistoria (id, nombre, orden) FROM stdin;
1	Orígenes Antiguos	1
2	Edad Media y Renecimiento	2
3	Siglos XVIII y XIX	3
5	Segunda mitad del siglo XX: La era digital	5
4	Primera mitad del siglo XX	4
6	Siglo XXI y Retos actuales	6
\.


--
-- TOC entry 5046 (class 0 OID 107170)
-- Dependencies: 242
-- Data for Name: informacion_tecnicacriptografica; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.informacion_tecnicacriptografica (id, nombre, descripcion, detalles, imagen, type) FROM stdin;
2	Cifrado César	El cifrado César es uno de los métodos de cifrado más antiguos y simples. Consiste en reemplazar cada letra del mensaje original (texto en claro) por otra letra que se encuentra un número fijo de posiciones desplazada en el alfabeto.	DESPLAZAMIENTO (CLAVE) Y ALFABETO\r\n\r\nSe elige un número que indica cuántas posiciones se desplaza cada letra en el alfabeto.\r\nGeneralmente, se trabaja con las 26 letras del alfabeto latino (A–Z), transformando todo a mayúsculas y sin espacios ni signos de puntuación, para simplificar.\r\n\r\nPROCESO DE CIFRADO\r\n\r\nSe toma cada letra del texto en claro.\r\nSe cuenta el número de la letra en el alfabeto (A=0, B=1, C=2, …).\r\nSe suma el desplazamiento (clave) al número de la letra.\r\nSe aplica la operación módulo 26 para asegurarse de que no se salga del rango de letras.\r\nLetra cifrada = (Posición de la letra original + Desplazamiento)   mod (Total de letras del alfabeto)\r\nEl resultado se traduce de nuevo a una letra (0→A, 1→B, 2→C, etc.).\r\n\r\nPROCESO DE DESCIFRADO\r\n\r\nPara recuperar el mensaje original, se realiza la operación inversa:\r\nLetra original = ( Posición de la letra cifrada − Desplazamiento)    mod (Total de letras del alfabeto)\r\nAsí se obtiene la posición de la letra original en el alfabeto.\r\n\r\nEJEMPLO SENCILLO\r\n\r\nMensaje en claro: “HOLA”\r\nDesplazamiento (clave): 3\r\nProceso de cifrado:\r\nH → K (H es la 7ª posición si A=0, +3 = 10, que corresponde a K)\r\nO → R\r\nL → O\r\nA → D\r\nMensaje cifrado: “KROD”	images/tecnicas/img37.jpg	Sustitución monoalfabético
1	Cifrado Vigenère	El cifrado Vigenère es un método de cifrado clásico que utiliza una palabra o frase clave para encriptar el mensaje. Este método se basa en la aplicación repetida del cifrado César, pero variando la cantidad de desplazamiento con cada letra, lo que genera mayor complejidad y dificulta su ruptura.	CLAVES Y ALFABETO\r\n\r\nEl cifrado Vigenère trabaja, generalmente, con el alfabeto latino (A–Z).\r\nSe elige una clave, que puede ser una palabra o frase (por ejemplo, “CLAVE”).\r\nTanto el texto original (en claro) como la clave suelen escribirse en letras mayúsculas y sin espacios ni signos de puntuación para simplificar.\r\n\r\nCONSTRUCCIÓN DE LA TABLA DE VIGENÈRE\r\n\r\nAunque no siempre se construye físicamente, la tabla de Vigenère está compuesta por 26 filas (o 27 en castellano debido a la letra Ñ), cada una correspondiente a un desplazamiento diferente del alfabeto.\r\nLa primera fila equivale al alfabeto sin desplazar (A, B, C, D, …), la segunda a un desplazamiento de 1 (B, C, D, E, …), la tercera a un desplazamiento de 2 (C, D, E, F, …), y así sucesivamente.\r\n\r\nPROCESO DE CIFRADO\r\n\r\nSe escribe el texto en claro y debajo (o sobre él) la clave repetida tantas veces como sea necesario para cubrir toda la longitud del mensaje.\r\nPor cada letra del mensaje original y su correspondiente letra de la clave, se encuentra la intersección en la tabla de Vigenère:\r\n    Se busca en la columna la letra del texto original.\r\n    Se busca en la fila la letra de la clave.\r\n    El cruce entre ambas proporciona la letra cifrada.\r\nAlternativamente, sin necesidad de la tabla física, se puede emplear la operación de desplazamiento:\r\n   Cifrado = ( Posición de la letra del texto + Posición de la letra de la clave)   Mod (Letras alfabeto)\r\n   El resultado se traduce de vuelta a una letra del alfabeto.\r\n\r\nPROCESO DE DESCIFRADO\r\n\r\nPara descifrar, se invierte el proceso:\r\n    Letra descifrada = (Posición de la letra cifrada − Posición de la letra de la clave)   Mod (Letras alfabeto)\r\n    El resultado se traduce de vuelta a una letra del alfabeto.\r\n    Es decir, se resta el valor (desplazamiento) de la letra de la clave a la letra cifrada.\r\n\r\nEJEMPLO SENCILLO\r\n\r\nMensaje en claro: “ATAQUE”\r\nClave: “CLAVE”\r\nSe repite la clave hasta tener la misma longitud que el mensaje: “CLAVEC” (para cubrir “ATAQUE”).\r\nPara cada posición, se suma el desplazamiento de la letra del mensaje con el desplazamiento de la letra de la clave.\r\nEl valor denominado mod (modificador), hace referencia a las letras que tienen el alfabeto que estamos utilizado. En castellano tenemos 27 letras en el abecedario, si la cifra es superior a 27 se vuelve a comenzar el abecedario, es decir que 29 corresponde a B. Para simplificar, los numeros superiores a 27 le restamos 27, así en el caso anterior nos sale 29-27 = 2 que corresponde con B. En el descifrado, operamos igual pero a la inversa, es decir que -1 corresponde a 26, por lo que  restaremos los numeros negativos a 27.\r\n     "ATAQUE" = 1 21 1 18 22 5\r\n     "CLAVEC" = 3 12 1 23 5 3\r\n     Cifrado = (1+3) ((21+12)-27) (1+1) ((18+23)-27) (5+22) (5+3) = 4 6 2 14 27 8 = "DFBNZH"\r\n     Descifrado = (4-3) ((6-12)+27) (2-1) ((14-23)+27) (27-23) (8-3) = 1 21 1 18 22 5 = "ATAQUE"	images/tecnicas/tabla_vigenere.webp	Sustitución Polialfabético
\.


--
-- TOC entry 5053 (class 0 OID 107326)
-- Dependencies: 249
-- Data for Name: usuarios_nota; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.usuarios_nota (id, contenido, fecha_creacion, actividad_id, perfil_id) FROM stdin;
1	ABCDEFGHIJKLMNOPQRSTUVWXYZ	2025-01-08 19:45:12.558219+01	1	1
2	LABRADO	2025-01-08 19:45:54.116475+01	2	1
3	TEST	2025-01-08 19:46:13.210863+01	2	1
4	test	2025-01-14 09:45:55.69181+01	1	1
5	test	2025-01-14 16:31:35.54475+01	3	1
6	test 2	2025-01-14 17:13:12.774866+01	3	1
7	test3	2025-01-14 17:19:04.137243+01	3	1
8	test4	2025-01-14 17:22:23.775134+01	3	1
9	test	2025-01-14 17:22:52.440232+01	3	1
\.


--
-- TOC entry 5048 (class 0 OID 107176)
-- Dependencies: 244
-- Data for Name: usuarios_perfil; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.usuarios_perfil (id, nivel, user_id, experiencia) FROM stdin;
2	Básico	2	0
1	Avanzado	1	1140
\.


--
-- TOC entry 5050 (class 0 OID 107181)
-- Dependencies: 246
-- Data for Name: usuarios_usuarioactividad; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.usuarios_usuarioactividad (id, estado, actividad_id, perfil_id, prueba) FROM stdin;
2	t	3	1	f
3	f	2	1	f
8	f	5	1	f
4	f	4	1	f
6	t	8	1	f
5	f	6	1	f
1	t	1	1	f
7	f	7	1	f
\.


--
-- TOC entry 5061 (class 0 OID 0)
-- Dependencies: 216
-- Name: actividades_actividad_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.actividades_actividad_id_seq', 8, true);


--
-- TOC entry 5062 (class 0 OID 0)
-- Dependencies: 218
-- Name: actividades_nivel_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.actividades_nivel_id_seq', 5, true);


--
-- TOC entry 5063 (class 0 OID 0)
-- Dependencies: 220
-- Name: actividades_pregunta_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.actividades_pregunta_id_seq', 1, false);


--
-- TOC entry 5064 (class 0 OID 0)
-- Dependencies: 222
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- TOC entry 5065 (class 0 OID 0)
-- Dependencies: 224
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- TOC entry 5066 (class 0 OID 0)
-- Dependencies: 226
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 60, true);


--
-- TOC entry 5067 (class 0 OID 0)
-- Dependencies: 229
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- TOC entry 5068 (class 0 OID 0)
-- Dependencies: 230
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 2, true);


--
-- TOC entry 5069 (class 0 OID 0)
-- Dependencies: 232
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- TOC entry 5070 (class 0 OID 0)
-- Dependencies: 234
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 71, true);


--
-- TOC entry 5071 (class 0 OID 0)
-- Dependencies: 236
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 15, true);


--
-- TOC entry 5072 (class 0 OID 0)
-- Dependencies: 238
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 41, true);


--
-- TOC entry 5073 (class 0 OID 0)
-- Dependencies: 241
-- Name: informacion_historiaep_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.informacion_historiaep_id_seq', 18, true);


--
-- TOC entry 5074 (class 0 OID 0)
-- Dependencies: 250
-- Name: informacion_periodohistoria_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.informacion_periodohistoria_id_seq', 6, true);


--
-- TOC entry 5075 (class 0 OID 0)
-- Dependencies: 243
-- Name: informacion_tecnicacriptografica_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.informacion_tecnicacriptografica_id_seq', 2, true);


--
-- TOC entry 5076 (class 0 OID 0)
-- Dependencies: 248
-- Name: usuarios_nota_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.usuarios_nota_id_seq', 9, true);


--
-- TOC entry 5077 (class 0 OID 0)
-- Dependencies: 245
-- Name: usuarios_perfil_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.usuarios_perfil_id_seq', 2, true);


--
-- TOC entry 5078 (class 0 OID 0)
-- Dependencies: 247
-- Name: usuarios_usuarioactividad_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.usuarios_usuarioactividad_id_seq', 8, true);


--
-- TOC entry 4785 (class 2606 OID 107186)
-- Name: actividades_actividad actividades_actividad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.actividades_actividad
    ADD CONSTRAINT actividades_actividad_pkey PRIMARY KEY (id);


--
-- TOC entry 4787 (class 2606 OID 107188)
-- Name: actividades_nivel actividades_nivel_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.actividades_nivel
    ADD CONSTRAINT actividades_nivel_pkey PRIMARY KEY (id);


--
-- TOC entry 4790 (class 2606 OID 107190)
-- Name: actividades_pregunta actividades_pregunta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.actividades_pregunta
    ADD CONSTRAINT actividades_pregunta_pkey PRIMARY KEY (id);


--
-- TOC entry 4793 (class 2606 OID 107192)
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- TOC entry 4798 (class 2606 OID 107194)
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- TOC entry 4801 (class 2606 OID 107196)
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- TOC entry 4795 (class 2606 OID 107198)
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- TOC entry 4804 (class 2606 OID 107200)
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- TOC entry 4806 (class 2606 OID 107202)
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- TOC entry 4814 (class 2606 OID 107204)
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 4817 (class 2606 OID 107206)
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- TOC entry 4808 (class 2606 OID 107208)
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- TOC entry 4820 (class 2606 OID 107210)
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- TOC entry 4823 (class 2606 OID 107212)
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- TOC entry 4811 (class 2606 OID 107214)
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- TOC entry 4826 (class 2606 OID 107216)
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- TOC entry 4829 (class 2606 OID 107218)
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- TOC entry 4831 (class 2606 OID 107220)
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- TOC entry 4833 (class 2606 OID 107222)
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- TOC entry 4836 (class 2606 OID 107224)
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- TOC entry 4839 (class 2606 OID 107226)
-- Name: informacion_historiaep informacion_historiaep_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.informacion_historiaep
    ADD CONSTRAINT informacion_historiaep_pkey PRIMARY KEY (id);


--
-- TOC entry 4858 (class 2606 OID 107351)
-- Name: informacion_periodohistoria informacion_periodohistoria_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.informacion_periodohistoria
    ADD CONSTRAINT informacion_periodohistoria_pkey PRIMARY KEY (id);


--
-- TOC entry 4842 (class 2606 OID 107228)
-- Name: informacion_tecnicacriptografica informacion_tecnicacriptografica_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.informacion_tecnicacriptografica
    ADD CONSTRAINT informacion_tecnicacriptografica_pkey PRIMARY KEY (id);


--
-- TOC entry 4856 (class 2606 OID 107332)
-- Name: usuarios_nota usuarios_nota_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_nota
    ADD CONSTRAINT usuarios_nota_pkey PRIMARY KEY (id);


--
-- TOC entry 4844 (class 2606 OID 107230)
-- Name: usuarios_perfil usuarios_perfil_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_perfil
    ADD CONSTRAINT usuarios_perfil_pkey PRIMARY KEY (id);


--
-- TOC entry 4846 (class 2606 OID 107232)
-- Name: usuarios_perfil usuarios_perfil_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_perfil
    ADD CONSTRAINT usuarios_perfil_user_id_key UNIQUE (user_id);


--
-- TOC entry 4850 (class 2606 OID 107234)
-- Name: usuarios_usuarioactividad usuarios_usuarioactividad_perfil_id_actividad_id_c462e22f_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_usuarioactividad
    ADD CONSTRAINT usuarios_usuarioactividad_perfil_id_actividad_id_c462e22f_uniq UNIQUE (perfil_id, actividad_id);


--
-- TOC entry 4852 (class 2606 OID 107236)
-- Name: usuarios_usuarioactividad usuarios_usuarioactividad_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_usuarioactividad
    ADD CONSTRAINT usuarios_usuarioactividad_pkey PRIMARY KEY (id);


--
-- TOC entry 4783 (class 1259 OID 107237)
-- Name: actividades_actividad_nivel_requerido_id_928dd75a; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX actividades_actividad_nivel_requerido_id_928dd75a ON public.actividades_actividad USING btree (nivel_requerido_id);


--
-- TOC entry 4788 (class 1259 OID 107238)
-- Name: actividades_pregunta_nivel_id_d22eb4b2; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX actividades_pregunta_nivel_id_d22eb4b2 ON public.actividades_pregunta USING btree (nivel_id);


--
-- TOC entry 4791 (class 1259 OID 107239)
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- TOC entry 4796 (class 1259 OID 107240)
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- TOC entry 4799 (class 1259 OID 107241)
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- TOC entry 4802 (class 1259 OID 107242)
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- TOC entry 4812 (class 1259 OID 107243)
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- TOC entry 4815 (class 1259 OID 107244)
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- TOC entry 4818 (class 1259 OID 107245)
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- TOC entry 4821 (class 1259 OID 107246)
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- TOC entry 4809 (class 1259 OID 107247)
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- TOC entry 4824 (class 1259 OID 107248)
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- TOC entry 4827 (class 1259 OID 107249)
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- TOC entry 4834 (class 1259 OID 107250)
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- TOC entry 4837 (class 1259 OID 107251)
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- TOC entry 4840 (class 1259 OID 107358)
-- Name: informacion_historiaep_priodo_id_3db3facf; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX informacion_historiaep_priodo_id_3db3facf ON public.informacion_historiaep USING btree (priodo_id);


--
-- TOC entry 4853 (class 1259 OID 107343)
-- Name: usuarios_nota_actividad_id_5c0bba58; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX usuarios_nota_actividad_id_5c0bba58 ON public.usuarios_nota USING btree (actividad_id);


--
-- TOC entry 4854 (class 1259 OID 107344)
-- Name: usuarios_nota_perfil_id_3a78fe98; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX usuarios_nota_perfil_id_3a78fe98 ON public.usuarios_nota USING btree (perfil_id);


--
-- TOC entry 4847 (class 1259 OID 107252)
-- Name: usuarios_usuarioactividad_actividad_id_45f4f65e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX usuarios_usuarioactividad_actividad_id_45f4f65e ON public.usuarios_usuarioactividad USING btree (actividad_id);


--
-- TOC entry 4848 (class 1259 OID 107253)
-- Name: usuarios_usuarioactividad_perfil_id_26a9c298; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX usuarios_usuarioactividad_perfil_id_26a9c298 ON public.usuarios_usuarioactividad USING btree (perfil_id);


--
-- TOC entry 4859 (class 2606 OID 107254)
-- Name: actividades_actividad actividades_activida_nivel_requerido_id_928dd75a_fk_actividad; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.actividades_actividad
    ADD CONSTRAINT actividades_activida_nivel_requerido_id_928dd75a_fk_actividad FOREIGN KEY (nivel_requerido_id) REFERENCES public.actividades_nivel(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4860 (class 2606 OID 107259)
-- Name: actividades_pregunta actividades_pregunta_nivel_id_d22eb4b2_fk_actividades_nivel_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.actividades_pregunta
    ADD CONSTRAINT actividades_pregunta_nivel_id_d22eb4b2_fk_actividades_nivel_id FOREIGN KEY (nivel_id) REFERENCES public.actividades_nivel(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4861 (class 2606 OID 107264)
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4862 (class 2606 OID 107269)
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4863 (class 2606 OID 107274)
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4864 (class 2606 OID 107279)
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4865 (class 2606 OID 107284)
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4866 (class 2606 OID 107289)
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4867 (class 2606 OID 107294)
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4868 (class 2606 OID 107299)
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4869 (class 2606 OID 107304)
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4870 (class 2606 OID 107353)
-- Name: informacion_historiaep informacion_historia_priodo_id_3db3facf_fk_informaci; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.informacion_historiaep
    ADD CONSTRAINT informacion_historia_priodo_id_3db3facf_fk_informaci FOREIGN KEY (priodo_id) REFERENCES public.informacion_periodohistoria(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4874 (class 2606 OID 107333)
-- Name: usuarios_nota usuarios_nota_actividad_id_5c0bba58_fk_actividades_actividad_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_nota
    ADD CONSTRAINT usuarios_nota_actividad_id_5c0bba58_fk_actividades_actividad_id FOREIGN KEY (actividad_id) REFERENCES public.actividades_actividad(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4875 (class 2606 OID 107338)
-- Name: usuarios_nota usuarios_nota_perfil_id_3a78fe98_fk_usuarios_perfil_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_nota
    ADD CONSTRAINT usuarios_nota_perfil_id_3a78fe98_fk_usuarios_perfil_id FOREIGN KEY (perfil_id) REFERENCES public.usuarios_perfil(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4871 (class 2606 OID 107309)
-- Name: usuarios_perfil usuarios_perfil_user_id_f343affd_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_perfil
    ADD CONSTRAINT usuarios_perfil_user_id_f343affd_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4872 (class 2606 OID 107314)
-- Name: usuarios_usuarioactividad usuarios_usuarioacti_actividad_id_45f4f65e_fk_actividad; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_usuarioactividad
    ADD CONSTRAINT usuarios_usuarioacti_actividad_id_45f4f65e_fk_actividad FOREIGN KEY (actividad_id) REFERENCES public.actividades_actividad(id) DEFERRABLE INITIALLY DEFERRED;


--
-- TOC entry 4873 (class 2606 OID 107319)
-- Name: usuarios_usuarioactividad usuarios_usuarioacti_perfil_id_26a9c298_fk_usuarios_; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios_usuarioactividad
    ADD CONSTRAINT usuarios_usuarioacti_perfil_id_26a9c298_fk_usuarios_ FOREIGN KEY (perfil_id) REFERENCES public.usuarios_perfil(id) DEFERRABLE INITIALLY DEFERRED;


-- Completed on 2025-01-21 21:38:05

--
-- PostgreSQL database dump complete
--

